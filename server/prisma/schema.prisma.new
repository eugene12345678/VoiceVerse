generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model - preserving existing structure
model User {
  id                  String                @id @default(uuid())
  username            String                @unique
  email               String                @unique
  password            String
  displayName         String?
  avatar              String?
  bio                 String?               @db.Text
  voiceSignature      String?
  followers           Int                   @default(0)
  following           Int                   @default(0)
  isVerified          Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  isPro               Boolean               @default(false)
  preferredLanguage   String                @default("en")
  
  // Existing relations
  audioFiles          AudioFile[]
  voiceTransformations VoiceTransformation[]
  
  // New relations
  posts               VoicePost[]
  comments            Comment[]             @relation("UserComments")
  createdChallenges   Challenge[]           @relation("ChallengeCreator")
  challengeParticipations ChallengeParticipation[]
  createdNFTs         NFT[]                 @relation("NFTCreator")
  ownedNFTs           NFT[]                 @relation("NFTOwner")
  sentNotifications   Notification[]        @relation("NotificationActor")
  receivedNotifications Notification[]      @relation("NotificationReceiver")
  settings            UserSettings?
  userFollowers       Follow[]              @relation("Following")
  userFollowing       Follow[]              @relation("Follower")
  likes               Like[]                @relation("UserLikes")
  nftLikes            NFTLike[]
  voiceModels         VoiceModel[]
  translations        Translation[]
  
  // Feed-related relations
  feedPosts           FeedPost[]
  savedPosts          SavedPost[]
  shares              Share[]
  commentLikes        CommentLike[]
}

// Existing AudioFile model
model AudioFile {
  id                                                                    String                @id
  userId                                                                String
  originalFilename                                                      String
  storagePath                                                           String
  fileSize                                                              Int
  duration                                                              Float
  mimeType                                                              String
  isPublic                                                              Boolean               @default(false)
  createdAt                                                             DateTime              @default(now())
  updatedAt                                                             DateTime
  
  // Relations
  user                                                                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceTransformations                                                 VoiceTransformation[] @relation("VoiceTransformation_sourceAudioIdToAudioFile")
  resultTransformations                                                 VoiceTransformation[] @relation("VoiceTransformation_transformedAudioIdToAudioFile")
  
  // New relation to VoicePost
  voicePost           VoicePost?
  
  // Feed-related relations
  feedPost            FeedPost?

  @@index([userId], map: "AudioFile_userId_fkey")
}

// Existing VoiceEffect model
model VoiceEffect {
  id                String   @id @default(uuid())
  effectId          String   @unique
  name              String
  category          String
  description       String?  @db.Text
  popularity        Int      @default(0)
  isProOnly         Boolean  @default(false)
  elevenLabsVoiceId String?
  settings          String?  @db.LongText
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  
  // Relations
  transformations   VoiceTransformation[]
  voiceModels       VoiceModel[]
}

// New model for ElevenLabs voice models
model VoiceModel {
  id                String   @id @default(uuid())
  userId            String
  name              String
  description       String?  @db.Text
  elevenLabsVoiceId String   @unique
  isPublic          Boolean  @default(false)
  isCloned          Boolean  @default(false)
  originalAudioId   String?
  settings          String?  @db.LongText
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  effect            VoiceEffect? @relation(fields: [effectId], references: [effectId])
  effectId          String?
  
  @@index([userId])
  @@index([effectId])
}

// New model for language translations
model Translation {
  id                String   @id @default(uuid())
  userId            String
  sourceLanguage    String
  targetLanguage    String
  sourceText        String   @db.Text
  translatedText    String   @db.Text
  audioFileId       String?
  translatedAudioId String?
  createdAt         DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Existing VoiceTransformation model
model VoiceTransformation {
  id                String     @id @default(uuid())
  userId            String
  sourceAudioId     String
  transformedAudioId String?
  effectId          String
  effectName        String
  effectCategory    String
  settings          String?    @db.LongText
  processingTime    Float?
  status            String     @default("pending")
  errorMessage      String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime
  
  // Relations
  sourceAudio       AudioFile  @relation("VoiceTransformation_sourceAudioIdToAudioFile", fields: [sourceAudioId], references: [id], onDelete: Cascade)
  transformedAudio  AudioFile? @relation("VoiceTransformation_transformedAudioIdToAudioFile", fields: [transformedAudioId], references: [id])
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  effect            VoiceEffect @relation(fields: [effectId], references: [effectId])

  @@index([sourceAudioId], map: "VoiceTransformation_sourceAudioId_fkey")
  @@index([transformedAudioId], map: "VoiceTransformation_transformedAudioId_fkey")
  @@index([userId], map: "VoiceTransformation_userId_fkey")
  @@index([effectId])
}

// Follow relationship
model Follow {
  id          String    @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime  @default(now())
  
  follower    User      @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User      @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
}

// Voice post model
model VoicePost {
  id          String    @id @default(uuid())
  userId      String
  audioFileId String    @unique
  caption     String?   @db.Text
  likes       Int       @default(0)
  comments    Int       @default(0)
  shares      Int       @default(0)
  waveform    Json?     // Stored as JSON array
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  audioFile   AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  postComments Comment[] @relation("VoicePostComments")
  postLikes   Like[]    @relation("VoicePostLikes")
  postTags    PostTag[]
  
  @@index([userId])
}

// Feed post model - Fixed to use separate table for tags
model FeedPost {
  id          String    @id @default(uuid())
  userId      String
  audioFileId String    @unique
  caption     String    @db.Text
  description String?   @db.Text
  isSponsored Boolean   @default(false)
  engagement  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  audioFile   AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  comments    Comment[] @relation("FeedPostComments")
  likes       Like[]    @relation("FeedPostLikes")
  shares      Share[]
  savedBy     SavedPost[]
  tags        FeedPostTag[]
  
  @@index([userId])
}

// Separate table for FeedPost tags
model FeedPostTag {
  id          String    @id @default(uuid())
  postId      String
  tag         String
  
  // Relations
  post        FeedPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([postId])
}

// Comment model - handles comments for all post types
model Comment {
  id          String    @id @default(uuid())
  postId      String?   // For FeedPost comments
  voicePostId String?   // For VoicePost comments
  userId      String
  content     String    @db.Text
  audioReplyId String?  // Optional audio reply attachment
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  feedPost    FeedPost? @relation("FeedPostComments", fields: [postId], references: [id], onDelete: Cascade)
  voicePost   VoicePost? @relation("VoicePostComments", fields: [voicePostId], references: [id], onDelete: Cascade)
  user        User      @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]    @relation("CommentLikes")
  commentLikes CommentLike[]
  
  @@index([postId])
  @@index([voicePostId])
  @@index([userId])
}

// Unified Like model - handles likes for posts and comments
model Like {
  id          String    @id @default(uuid())
  userId      String
  feedPostId  String?   // For FeedPost likes
  voicePostId String?   // For VoicePost likes
  commentId   String?   // For comment likes
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User       @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  feedPost    FeedPost?  @relation("FeedPostLikes", fields: [feedPostId], references: [id], onDelete: Cascade)
  voicePost   VoicePost? @relation("VoicePostLikes", fields: [voicePostId], references: [id], onDelete: Cascade)
  comment     Comment?   @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, feedPostId], name: "unique_user_feedpost_like")
  @@unique([userId, voicePostId], name: "unique_user_voicepost_like")
  @@unique([userId, commentId], name: "unique_user_comment_like")
  @@index([userId])
  @@index([feedPostId])
  @@index([voicePostId])
  @@index([commentId])
}

// Comment Like model
model CommentLike {
  id          String    @id @default(uuid())
  commentId   String
  userId      String
  createdAt   DateTime  @default(now())
  
  // Relations
  comment     Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([commentId, userId])
  @@index([userId])
}

// Saved Post model
model SavedPost {
  id          String    @id @default(uuid())
  postId      String
  userId      String
  createdAt   DateTime  @default(now())
  
  // Relations
  post        FeedPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId])
  @@index([userId])
}

// Share model
model Share {
  id          String    @id @default(uuid())
  postId      String
  userId      String
  platform    String    @default("other")
  createdAt   DateTime  @default(now())
  
  // Relations
  post        FeedPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([userId])
}

// Tag model
model Tag {
  id          String    @id @default(uuid())
  name        String    @unique
  
  // Relations
  posts       PostTag[]
  challenges  ChallengeTag[]
}

// Post-Tag relationship
model PostTag {
  postId      String
  tagId       String
  
  // Relations
  post        VoicePost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([postId, tagId])
  @@index([tagId])
}

// Challenge model
model Challenge {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  creatorId   String
  audioPromptId String?
  reward      String?
  startDate   DateTime
  endDate     DateTime
  difficulty  ChallengeDifficulty
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  creator     User      @relation("ChallengeCreator", fields: [creatorId], references: [id])
  participants ChallengeParticipation[]
  challengeTags ChallengeTag[]
  
  @@index([creatorId])
}

enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
}

// Challenge participation model - Updated with participant information
model ChallengeParticipation {
  id              String    @id @default(uuid())
  challengeId     String
  userId          String
  submissionAudioId String?
  submissionDate  DateTime?
  createdAt       DateTime  @default(now())
  
  // New participant information fields
  name            String?
  email           String?
  motivation      String?   @db.Text
  experience      String?   @db.Text
  socialMediaHandle String?
  agreeToTerms    Boolean   @default(false)
  
  // Relations
  challenge       Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([challengeId, userId])
  @@index([userId])
}

// Challenge-Tag relationship
model ChallengeTag {
  challengeId String
  tagId       String
  
  // Relations
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([challengeId, tagId])
  @@index([tagId])
}

// NFT model
model NFT {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  creatorId   String
  ownerId     String
  audioFileId String    @unique
  imageUrl    String
  price       Float
  currency    String
  royalty     Float
  likes       Int       @default(0)
  createdAt   DateTime  @default(now())
  isForSale   Boolean   @default(true)
  
  // Relations
  creator     User      @relation("NFTCreator", fields: [creatorId], references: [id])
  owner       User      @relation("NFTOwner", fields: [ownerId], references: [id])
  nftLikes    NFTLike[]
  transactions NFTTransaction[]
  
  @@index([creatorId])
  @@index([ownerId])
}

// NFT Like model
model NFTLike {
  id          String    @id @default(uuid())
  nftId       String
  userId      String
  createdAt   DateTime  @default(now())
  
  // Relations
  nft         NFT       @relation(fields: [nftId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])
  
  @@unique([nftId, userId])
  @@index([userId])
}

// NFT Transaction model
model NFTTransaction {
  id          String    @id @default(uuid())
  nftId       String
  sellerId    String
  buyerId     String
  price       Float
  currency    String
  transactionHash String?
  createdAt   DateTime  @default(now())
  
  // Relations
  nft         NFT       @relation(fields: [nftId], references: [id])
  
  @@index([nftId])
  @@index([sellerId])
  @@index([buyerId])
}

// Notification model
model Notification {
  id          String    @id @default(uuid())
  userId      String
  type        NotificationType
  actorId     String
  contentId   String?
  content     String?   @db.Text
  createdAt   DateTime  @default(now())
  isRead      Boolean   @default(false)
  
  // Relations
  user        User      @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)
  actor       User      @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([actorId])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  CHALLENGE
  NFT
}

// User Settings model
model UserSettings {
  id          String    @id @default(uuid())
  userId      String    @unique
  theme       Theme     @default(SYSTEM)
  language    String    @default("en")
  notificationPreferences Json
  privacySettings Json
  accessibilitySettings Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

// Analytics model
model Analytics {
  id          String    @id @default(uuid())
  userId      String
  views       Int       @default(0)
  likes       Int       @default(0)
  comments    Int       @default(0)
  shares      Int       @default(0)
  followers   Int       @default(0)
  date        DateTime  @default(now())
  
  @@unique([userId, date])
  @@index([userId])
}