generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(uuid())
  firebaseUid             String?                  @unique
  username                String                   @unique
  email                   String                   @unique
  password                String
  displayName             String?
  avatar                  String?
  bio                     String?                  @db.Text
  voiceSignature          String?
  followers               Int                      @default(0)
  following               Int                      @default(0)
  isVerified              Boolean                  @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime
  isPro                   Boolean                  @default(false)
  preferredLanguage       String                   @default("en")
  resetPasswordExpires    DateTime?
  resetPasswordToken      String?                  @unique
  stripeCustomerId        String?                  @unique
  aiAssistantChats        AIAssistantChat[]
  algorandWallet          AlgorandWallet?
  audioFiles              AudioFile[]
  billingInfo             BillingInfo?
  calendlyEvents          CalendlyEvent[]
  createdChallenges       Challenge[]              @relation("ChallengeCreator")
  challengeParticipations ChallengeParticipation[]
  comments                Comment[]                @relation("UserComments")
  commentLikes            CommentLike[]
  contactMessages         ContactMessage[]
  feedPosts               FeedPost[]
  userFollowing           Follow[]                 @relation("Follower")
  userFollowers           Follow[]                 @relation("Following")
  likes                   Like[]                   @relation("UserLikes")
  createdNFTs             NFT[]                    @relation("NFTCreator")
  ownedNFTs               NFT[]                    @relation("NFTOwner")
  nftLikes                NFTLike[]
  nftMarketplaceListings  NFTMarketplaceListing[]  @relation("NFTSeller")
  sentNotifications       Notification[]           @relation("NotificationActor")
  receivedNotifications   Notification[]           @relation("NotificationReceiver")
  paymentMethods          PaymentMethod[]
  promoCodeUsages         PromoCodeUsage[]
  savedPosts              SavedPost[]
  savedVoiceCreations     SavedVoiceCreation[]
  shares                  Share[]
  subscriptions           Subscription[]
  translations            Translation[]
  translatedAudios        TranslatedAudio[]
  settings                UserSettings?
  voiceModels             VoiceModel[]
  voiceClones             VoiceClone[]
  posts                   VoicePost[]
  voiceTransformations    VoiceTransformation[]
}

model AudioFile {
  id                        String                @id
  userId                    String
  originalFilename          String
  storagePath               String
  fileSize                  Int
  duration                  Float
  mimeType                  String
  isPublic                  Boolean               @default(false)
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime
  audioData                 Bytes?
  user                      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedPost                  FeedPost?
  originalVoiceCreations    SavedVoiceCreation[]  @relation("SavedVoiceCreation_originalAudioIdToAudioFile")
  transformedVoiceCreations SavedVoiceCreation[]  @relation("SavedVoiceCreation_transformedAudioIdToAudioFile")
  voicePost                 VoicePost?
  sourceTransformations     VoiceTransformation[] @relation("VoiceTransformation_sourceAudioIdToAudioFile")
  resultTransformations     VoiceTransformation[] @relation("VoiceTransformation_transformedAudioIdToAudioFile")
  translatedAudios          TranslatedAudio[]
  voiceClones               VoiceClone[]

  @@index([userId])
}

model VoiceEffect {
  id                String                @id @default(uuid())
  effectId          String                @unique
  name              String
  category          String
  description       String?               @db.Text
  popularity        Int                   @default(0)
  isProOnly         Boolean               @default(false)
  elevenLabsVoiceId String?
  settings          String?               @db.Text
  createdAt         DateTime              @default(now())
  updatedAt         DateTime
  voiceModels       VoiceModel[]
  transformations   VoiceTransformation[]
}

model VoiceModel {
  id                String       @id @default(uuid())
  userId            String
  name              String
  description       String?      @db.Text
  elevenLabsVoiceId String       @unique
  isPublic          Boolean      @default(false)
  isCloned          Boolean      @default(false)
  originalAudioId   String?
  settings          String?      @db.Text
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  effectId          String?
  effect            VoiceEffect? @relation(fields: [effectId], references: [effectId])
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([effectId])
}

model VoiceClone {
  id                String    @id @default(uuid())
  userId            String
  sourceAudioId     String
  elevenLabsVoiceId String    @unique
  voiceName         String
  voiceDescription  String?   @db.Text
  status            String    @default("ready")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceAudio       AudioFile @relation(fields: [sourceAudioId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sourceAudioId])
  @@index([elevenLabsVoiceId])
}

model Translation {
  id                String   @id @default(uuid())
  userId            String
  sourceLanguage    String
  targetLanguage    String
  sourceText        String   @db.Text
  translatedText    String   @db.Text
  audioFileId       String?
  translatedAudioId String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TranslatedAudio {
  id              String    @id
  userId          String
  originalAudioId String
  targetLanguage  String
  translatedText  String    @db.Text
  audioData       Bytes?
  filePath        String?
  fileSize        Int
  mimeType        String    @default("audio/mpeg")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalAudio   AudioFile @relation(fields: [originalAudioId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([originalAudioId])
}

model VoiceTransformation {
  id                 String      @id @default(uuid())
  userId             String
  sourceAudioId      String
  transformedAudioId String?
  effectId           String
  effectName         String
  effectCategory     String
  settings           String?     @db.Text
  processingTime     Float?
  status             String      @default("pending")
  errorMessage       String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime
  effect             VoiceEffect @relation(fields: [effectId], references: [effectId])
  sourceAudio        AudioFile   @relation("VoiceTransformation_sourceAudioIdToAudioFile", fields: [sourceAudioId], references: [id], onDelete: Cascade)
  transformedAudio   AudioFile?  @relation("VoiceTransformation_transformedAudioIdToAudioFile", fields: [transformedAudioId], references: [id])
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sourceAudioId])
  @@index([transformedAudioId])
  @@index([userId])
  @@index([effectId])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
}

model VoicePost {
  id           String    @id @default(uuid())
  userId       String
  audioFileId  String    @unique
  caption      String?   @db.Text
  likes        Int       @default(0)
  comments     Int       @default(0)
  shares       Int       @default(0)
  waveform     String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  postComments Comment[] @relation("VoicePostComments")
  postLikes    Like[]    @relation("VoicePostLikes")
  postTags     PostTag[]
  audioFile    AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model FeedPost {
  id          String        @id @default(uuid())
  userId      String
  audioFileId String        @unique
  caption     String        @db.Text
  description String?       @db.Text
  isSponsored Boolean       @default(false)
  engagement  Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comments    Comment[]     @relation("FeedPostComments")
  audioFile   AudioFile     @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        FeedPostTag[]
  likes       Like[]        @relation("FeedPostLikes")
  savedBy     SavedPost[]
  shares      Share[]

  @@index([userId])
}

model FeedPostTag {
  id     String   @id @default(uuid())
  postId String
  tag    String
  post   FeedPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Comment {
  id           String        @id @default(uuid())
  postId       String?
  userId       String
  content      String        @db.Text
  audioReplyId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  voicePostId  String?
  feedPost     FeedPost?     @relation("FeedPostComments", fields: [postId], references: [id], onDelete: Cascade)
  user         User          @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  voicePost    VoicePost?    @relation("VoicePostComments", fields: [voicePostId], references: [id], onDelete: Cascade)
  commentLikes CommentLike[]
  likes        Like[]        @relation("CommentLikes")

  @@index([postId])
  @@index([voicePostId])
  @@index([userId])
}

model Like {
  id          String     @id @default(uuid())
  userId      String
  commentId   String?
  createdAt   DateTime   @default(now())
  feedPostId  String?
  voicePostId String?
  comment     Comment?   @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)
  feedPost    FeedPost?  @relation("FeedPostLikes", fields: [feedPostId], references: [id], onDelete: Cascade)
  user        User       @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  voicePost   VoicePost? @relation("VoicePostLikes", fields: [voicePostId], references: [id], onDelete: Cascade)

  @@unique([userId, feedPostId], name: "unique_user_feedpost_like")
  @@unique([userId, voicePostId], name: "unique_user_voicepost_like")
  @@unique([userId, commentId], name: "unique_user_comment_like")
  @@index([userId])
  @@index([feedPostId])
  @@index([voicePostId])
  @@index([commentId])
}

model CommentLike {
  id        String   @id @default(uuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([userId])
}

model SavedPost {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      FeedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
}

model Share {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  platform  String   @default("other")
  createdAt DateTime @default(now())
  post      FeedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model Tag {
  id         String         @id @default(uuid())
  name       String         @unique
  challenges ChallengeTag[]
  posts      PostTag[]
}

model PostTag {
  postId String
  tagId  String
  post   VoicePost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([tagId])
}

model Challenge {
  id            String                   @id @default(uuid())
  title         String
  description   String                   @db.Text
  creatorId     String
  audioPromptId String?
  reward        String?
  startDate     DateTime
  endDate       DateTime
  difficulty    ChallengeDifficulty
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  creator       User                     @relation("ChallengeCreator", fields: [creatorId], references: [id])
  participants  ChallengeParticipation[]
  challengeTags ChallengeTag[]

  @@index([creatorId])
}

model ChallengeParticipation {
  id                String    @id @default(uuid())
  challengeId       String
  userId            String
  submissionAudioId String?
  submissionDate    DateTime?
  createdAt         DateTime  @default(now())
  name              String?
  email             String?
  motivation        String?   @db.Text
  experience        String?   @db.Text
  socialMediaHandle String?
  agreeToTerms      Boolean   @default(false)
  challenge         Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([challengeId, userId])
  @@index([userId])
}

model ChallengeTag {
  challengeId String
  tagId       String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([challengeId, tagId])
  @@index([tagId])
}

model NFT {
  id                   String                  @id @default(uuid())
  title                String
  description          String                  @db.Text
  creatorId            String
  ownerId              String
  audioFileId          String                  @unique
  imageUrl             String
  price                Float
  currency             String
  royalty              Float
  likes                Int                     @default(0)
  createdAt            DateTime                @default(now())
  isForSale            Boolean                 @default(true)
  assetId              Int?
  blockchainStatus     String?
  metadata             String?                 @db.Text
  duration             String?
  algorandTransactions AlgorandTransaction[]
  creator              User                    @relation("NFTCreator", fields: [creatorId], references: [id])
  owner                User                    @relation("NFTOwner", fields: [ownerId], references: [id])
  nftLikes             NFTLike[]
  marketplaceListings  NFTMarketplaceListing[]
  nftTags              NFTTag[]
  transactions         NFTTransaction[]

  @@index([creatorId])
  @@index([ownerId])
  @@index([assetId])
}

model NFTTag {
  id    String @id @default(uuid())
  nftId String
  tag   String
  nft   NFT    @relation(fields: [nftId], references: [id], onDelete: Cascade)

  @@unique([nftId, tag])
  @@index([nftId])
  @@index([tag])
}

model NFTLike {
  id        String   @id @default(uuid())
  nftId     String
  userId    String
  createdAt DateTime @default(now())
  nft       NFT      @relation(fields: [nftId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([nftId, userId])
  @@index([userId])
}

model NFTTransaction {
  id              String   @id @default(uuid())
  nftId           String
  sellerId        String
  buyerId         String
  price           Float
  currency        String
  transactionHash String?
  createdAt       DateTime @default(now())
  nft             NFT      @relation(fields: [nftId], references: [id])

  @@index([nftId])
  @@index([sellerId])
  @@index([buyerId])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  actorId   String
  contentId String?
  content   String?          @db.Text
  createdAt DateTime         @default(now())
  isRead    Boolean          @default(false)
  actor     User             @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)
  user      User             @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([actorId])
}

model UserSettings {
  id                      String   @id @default(uuid())
  userId                  String   @unique
  theme                   Theme    @default(SYSTEM)
  language                String   @default("en")
  notificationPreferences String   @db.Text
  privacySettings         String   @db.Text
  accessibilitySettings   String   @db.Text
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        String   @id @default(uuid())
  userId    String
  views     Int      @default(0)
  likes     Int      @default(0)
  comments  Int      @default(0)
  shares    Int      @default(0)
  followers Int      @default(0)
  date      DateTime @default(now())

  @@unique([userId, date])
  @@index([userId])
}

model AlgorandWallet {
  id        String   @id @default(uuid())
  userId    String   @unique
  address   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([address])
}

model AlgorandTransaction {
  id              String                    @id @default(uuid())
  nftId           String
  type            AlgorandTransactionType
  fromAddress     String
  toAddress       String
  amount          Float
  status          AlgorandTransactionStatus
  transactionHash String?
  errorMessage    String?                   @db.Text
  createdAt       DateTime                  @default(now())
  completedAt     DateTime?
  nft             NFT                       @relation(fields: [nftId], references: [id])

  @@index([nftId])
  @@index([fromAddress])
  @@index([toAddress])
  @@index([status])
}

model NFTMarketplaceListing {
  id          String           @id @default(uuid())
  nftId       String
  sellerId    String
  price       Float
  currency    String
  status      NFTListingStatus
  createdAt   DateTime         @default(now())
  completedAt DateTime?
  nft         NFT              @relation(fields: [nftId], references: [id])
  seller      User             @relation("NFTSeller", fields: [sellerId], references: [id])

  @@index([nftId])
  @@index([sellerId])
  @@index([status])
}

model ContactMessage {
  id          String           @id @default(uuid())
  name        String
  email       String
  subject     String
  message     String           @db.Text
  priority    ContactPriority  @default(MEDIUM)
  type        ContactType      @default(GENERAL)
  status      ContactStatus    @default(NEW)
  timestamp   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  attachments String?          @db.Text
  responseId  String?
  userId      String?
  user        User?            @relation(fields: [userId], references: [id])
  response    ContactResponse? @relation("MessageResponse")

  @@index([userId])
  @@index([status])
  @@index([type])
}

model ContactResponse {
  id             String         @id @default(uuid())
  messageId      String         @unique
  responderName  String?
  responderEmail String?
  content        String         @db.Text
  timestamp      DateTime       @default(now())
  message        ContactMessage @relation("MessageResponse", fields: [messageId], references: [id], onDelete: Cascade)
}

model AIAssistantChat {
  id        String   @id @default(uuid())
  sessionId String   @unique
  userId    String?
  messages  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CalendlyEvent {
  id               String   @id @default(uuid())
  eventType        String
  eventName        String
  inviteeEmail     String
  inviteeName      String
  startTime        DateTime
  endTime          DateTime
  status           String
  calendlyEventUri String   @unique
  createdAt        DateTime @default(now())
  userId           String?
  notes            String?  @db.Text
  user             User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([eventType])
  @@index([status])
}

model Subscription {
  id                   String             @id @default(uuid())
  userId               String
  stripeSubscriptionId String             @unique
  status               SubscriptionStatus @default(ACTIVE)
  planType             PlanType
  billingPeriod        BillingPeriod
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  invoices             Invoice[]
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Invoice {
  id              String        @id @default(uuid())
  subscriptionId  String
  stripeInvoiceId String        @unique
  amount          Float
  currency        String        @default("USD")
  status          InvoiceStatus
  invoiceUrl      String?
  pdfUrl          String?
  createdAt       DateTime      @default(now())
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
}

model BillingInfo {
  id         String   @id @default(uuid())
  userId     String   @unique
  name       String
  email      String?
  phone      String?
  address    String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id                    String            @id @default(uuid())
  userId                String
  stripePaymentMethodId String            @unique
  type                  PaymentMethodType
  last4                 String?
  expiryMonth           Int?
  expiryYear            Int?
  brand                 String?
  isDefault             Boolean           @default(false)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PromoCode {
  id              String           @id @default(uuid())
  code            String           @unique
  description     String?
  discountPercent Float?
  discountAmount  Float?
  currency        String           @default("USD")
  maxRedemptions  Int?
  timesRedeemed   Int              @default(0)
  validFrom       DateTime?
  validUntil      DateTime?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  usages          PromoCodeUsage[]
}

model PromoCodeUsage {
  id          String    @id @default(uuid())
  userId      String
  promoCodeId String
  appliedAt   DateTime  @default(now())
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, promoCodeId])
  @@index([userId])
  @@index([promoCodeId])
}

model SavedVoiceCreation {
  id                 String     @id @default(uuid())
  userId             String
  name               String
  description        String?    @db.Text
  originalAudioId    String
  transformedAudioId String?
  effectId           String?
  effectName         String?
  effectCategory     String?
  settings           String?    @db.Text
  isPublic           Boolean    @default(false)
  tags               String?    @db.Text
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  originalAudio      AudioFile  @relation("SavedVoiceCreation_originalAudioIdToAudioFile", fields: [originalAudioId], references: [id], onDelete: Cascade)
  transformedAudio   AudioFile? @relation("SavedVoiceCreation_transformedAudioIdToAudioFile", fields: [transformedAudioId], references: [id])
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([originalAudioId])
  @@index([transformedAudioId])
  @@index([effectCategory])
}

enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  CHALLENGE
  NFT
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum AlgorandTransactionType {
  MINT
  TRANSFER
  SALE
  ROYALTY
}

enum AlgorandTransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NFTListingStatus {
  ACTIVE
  SOLD
  CANCELLED
}

enum ContactPriority {
  LOW
  MEDIUM
  HIGH
}

enum ContactType {
  GENERAL
  TECHNICAL
  BILLING
  SUPPORT
  FEEDBACK
  OTHER
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIALING
}

enum PlanType {
  PRO
  PREMIUM
  ENTERPRISE
}

enum BillingPeriod {
  MONTHLY
  YEARLY
}

enum InvoiceStatus {
  PAID
  OPEN
  VOID
  UNCOLLECTIBLE
}

enum PaymentMethodType {
  CARD
  BANK_ACCOUNT
  PAYPAL
}
